#!/bin/sh
# Time-stamp: <2012-04-02-21:54:05 星期一 by geniux>

################################################################################
# @file   install-sh
# @author geniux <riegamaths@gmail.com>
# @date   2011年 08月 20日 星期六 10:18:43 CST

# @brief  Install script for this app
################################################################################

TOP_PATH=$PWD
CONFIG_FILE=$TOP_PATH/emacs.conf
PKG_PATH=$TOP_PATH/pkg
APP_PATH=$TOP_PATH/app
MY_LISP_PATH=$TOP_PATH/my-lisp

TARGET_CONFIG_FILE=$HOME/.emacs
TARGET_CONFIG_PATH=$HOME/.emacs.d
TARGET_SITE_LISP_PATH=$TARGET_CONFIG_PATH/site-lisp
TARGET_MY_LISP_PATH=$TARGET_CONFIG_PATH/my-lisp
TARGET_APP_PATH=$TARGET_CONFIG_PATH/app
TEMPORARY_PATH=$TARGET_CONFIG_PATH/temporary

# Get the os type
OS_TYPE=`cat /etc/*-release`
MAKE="make"

# Now check whether all conditions are met.
# echo "Checking for whether all conditions are met ......"
# test=`which hg`
# if [ $? -ne 0 ]; then
#     echo "Mercurial must be installed, please install it and go on"
#     echo "Exit"
#     exit 1;
# fi
# test=`which cvs`
# if [ $? -ne 0 ]; then
#     echo "CVS must be installed, please install it and go on"
#     echo "Exit"
#     exit 1;
# fi

# Back up the old emacs config directory if have. Create directory we need
if [ -d $TARGET_CONFIG_PATH ]; then
    echo "Back up $TARGET_CONFIG_PATH ......"
    rm -rf $TARGET_CONFIG_PATH-bakup
    cp -r $TARGET_CONFIG_PATH $TARGET_CONFIG_PATH-bakup
fi
mkdir -p $TARGET_SITE_LISP_PATH
mkdir -p $TARGET_MY_LISP_PATH
mkdir -p $TARGET_APP_PATH
mkdir -p $TEMPORARY_PATH

################################################################################
# Install fonts
FONT_DIR=/usr/share/fonts
APPLE_FONT_DIR=$FONT_DIR/apple
WINDOWS_FONT_DIR=$FONT_DIR/windows
ret=`fc-list | grep -i "monaco"`
if [ $? -ne 0 ]; then
	echo "Install monaco font ......"
	sudo mkdir -p $APPLE_FONT_DIR
	sudo cp $PKG_PATH/MONACO.TTF $APPLE_FONT_DIR
	cd $APPLE_FONT_DIR
	sudo mkfontscale
	sudo mkfontdir
	sudo fc-cache -fv
fi

# ret=`fc-list | grep -i "YaHei"`
# if [ $? -ne 0 ]; then
# 	echo "Install yahei font ......"
# 	sudo mkdir -p $WINDOWS_FONT_DIR
# 	sudo cp $PKG_PATH/msyh*.ttf $WINDOWS_FONT_DIR
# 	cd $WINDOWS_FONT_DIR
# 	sudo mkfontscale
# 	sudo mkfontdir
# 	sudo fc-cache -fv
# fi

# Install site lisp and my lisp
echo "Copy pkg's lisp files to config directory ......"
cp $PKG_PATH/*.el $TARGET_SITE_LISP_PATH

echo "Copy all my files to config directory ......"
cp -r $MY_LISP_PATH/*.el $TARGET_MY_LISP_PATH

# Copy the .emacs initial file to install directory, if there is a .emacs
# already, back up the old .emacs
if [ -f $TARGET_CONFIG_FILE ]; then
    echo "Back up $TARGET_CONFIG_FILE ......"
    mv $TARGET_CONFIG_FILE $TARGET_CONFIG_FILE-bakup
fi
cp $CONFIG_FILE $TARGET_CONFIG_FILE

################################################################################
# Install cscope
CSCOPE_VERSION=15.7a
which cscope 2> /dev/null > /dev/null
if [ $? -ne 0 ]; then
	sudo rm -rf /tmp/cscope-$CSCOPE_VERSION
	tar xfj $PKG_PATH/cscope-$CSCOPE_VERSION.tar.bz2 -C /tmp
	cd /tmp/cscope-$CSCOPE_VERSION
	./configure --prefix=/usr --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --mandir=/usr/share/man --infodir=/usr/share/info --datadir=/usr/share --sysconfdir=/etc --localstatedir=/var/lib
	[ $? -eq 0 ] || exit 1
	$MAKE && sudo $MAKE install
	cp -f contrib/xcscope/xcscope.el $TARGET_SITE_LISP_PATH
	sudo cp -f contrib/xcscope/cscope-indexer /bin
fi

################################################################################
# Install ibus.el to solove the bug that emacs cant use ibus
echo "import sys" >> $TOP_PATH/xlib_test.py
echo "try:" >> $TOP_PATH/xlib_test.py
echo "    import Xlib" >> $TOP_PATH/xlib_test.py
echo "    sys.exit(0)" >> $TOP_PATH/xlib_test.py
echo "except ImportError:" >> $TOP_PATH/xlib_test.py
echo "    sys.exit(1)" >> $TOP_PATH/xlib_test.py

python $TOP_PATH/xlib_test.py
if [ $? -ne 0 ]; then
	echo "python-xlib is not install, please install it, like sudo emerge python-xlib"
	echo "!!!!!! Exit"
	rm -f $TOP_PATH/xlib_test.py
	exit 1
fi
rm -f $TOP_PATH/xlib_test.py

IBUS_EL_VERSION=0.2.1
tar xfz $PKG_PATH/ibus-el-$IBUS_EL_VERSION.tar.gz -C /tmp
cp -f /tmp/ibus-el-$IBUS_EL_VERSION/ibus-el-agent $TARGET_SITE_LISP_PATH
cp -f /tmp/ibus-el-$IBUS_EL_VERSION/ibus.el $TARGET_SITE_LISP_PATH

################################################################################
# Install yasnippet
YASNIPPET_VERSION=0.6.1c
if [ ! -d $TARGET_SITE_LISP_PATH/yasnippet ]; then
	echo "Install yasnippet ......"
	tar xfj $PKG_PATH/yasnippet-$YASNIPPET_VERSION.tar.bz2 -C /tmp
	mv /tmp/yasnippet-$YASNIPPET_VERSION $TARGET_SITE_LISP_PATH/yasnippet
fi

# Install auto-complete
echo "Install auto-complete ......"


# Install anything-config
AUTO_COMPLETE_VERSION=1.3.1
if [ ! -d $TARGET_SITE_LISP_PATH/auto-complete ]; then
	sudo rm -rf /tmp/auto-complete-$AUTO_COMPLETE_VERSION
	tar xfj $PKG_PATH/auto-complete-$AUTO_COMPLETE_VERSION.tar.bz2 -C /tmp;
	mkdir -p $TARGET_SITE_LISP_PATH/auto-complete;
	cd /tmp/auto-complete-$AUTO_COMPLETE_VERSION;
	$MAKE install DIR=$TARGET_SITE_LISP_PATH/auto-complete
fi


################################################################################
# Install rope, ropemacs, ropemode for python mode
# NOTE: dont install from package manager like ubuntu's apt-get,
# archlinux's yaourt, because those apps from package manager have bugs.
# Howto install: 
# hg clone http://bitbucket.org/agr/rope
# hg clone http://bitbucket.org/agr/ropemacs
# hg clone http://bitbucket.org/agr/ropemode
# sudo easy_install rope
# ln -s ../ropemode/ropemode ropemacs/
# sudo easy_install ropemacs
# sudo apt-get install pymacs(yaourt -S pymacs)
echo "Install python mode ......"
sudo rm -rf /tmp/Pymacs-0.23
tar xfz $PKG_PATH/Pymacs-0.23.tar.gz -C /tmp
cd /tmp/Pymacs-0.23
$MAKE && sudo $MAKE install
cp pymacs.el $TARGET_SITE_LISP_PATH
chmod u+w $TARGET_SITE_LISP_PATH/pymacs.el

sudo rm -rf /tmp/python-mode
cp -rd $PKG_PATH/python-mode /tmp
cd /tmp/python-mode
sudo easy_install rope
ln -s ../ropemode/ropemode ropemacs
sudo easy_install ropemacs

PYTHON_VERSION=`python -V 2>&1 | cut -b8-10`
PYTHON_MODULE_PATH=/usr/lib/python$PYTHON_VERSION/site-packages
if [ ! -d $PYTHON_MODULE_PATH ]; then
	sudo mkdir -p $PYTHON_MODULE_PATH
fi
sudo cp $APP_PATH/pycomplete.py $PYTHON_MODULE_PATH

################################################################################
# Jabber for gtalk
mkdir -p $TARGET_SITE_LISP_PATH/share/emacs/site-lisp
if [ ! -f $TARGET_SITE_LISP_PATH/share/emacs/site-lisp/jabber-autoloads.el ]; then
	echo "Install emacs-jabber ......"
	sudo rm -rf /tmp/emacs-jabber-0.8.0
	tar xfj $PKG_PATH/emacs-jabber-0.8.0.tar.bz2 -C /tmp
	cd /tmp/emacs-jabber-0.8.0
	./configure --prefix=$TARGET_SITE_LISP_PATH
	[ $? -eq 0 ] || exit 1
	$MAKE && $MAKE install
fi

################################################################################
# Install gc
# test=`which /lib/libgc.so`
if [ ! -f /usr/include/gc.h ]; then
    echo "Gc library is not install, install it ......"
    sudo rm -rf /tmp/gc-7.1
    tar xfz $PKG_PATH/gc-7.1.tar.gz -C /tmp
    cd /tmp/gc-7.1
    ./configure --prefix=/usr --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --mandir=/usr/share/man --infodir=/usr/share/info --datadir=/usr/share --sysconfdir=/etc --localstatedir=/var/lib --enable-cplusplus --disable-threads
    [ $? -eq 0 ] || exit 1
$MAKE && sudo $MAKE install
fi

# Install w3m
test=`which w3m`
# if  [ $? -ne 0 ]; then
#     echo "W3m is not install, install it ......"
#     sudo rm -rf /tmp/w3m-0.5.3
#     tar xfz $PKG_PATH/w3m-0.5.3.tar.gz -C /tmp
#     cd /tmp/w3m-0.5.3
#     ./configure --prefix=/usr --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu \
# 	--mandir=/usr/share/man --infodir=/usr/share/info --datadir=/usr/share \
# 	--sysconfdir=/etc --localstatedir=/var/lib --with-editor=/usr/bin/vi \
# 	--with-mailer=/bin/mail --with-browser=/usr/bin/firefox --with-termlib=curses \
# 	--enable-image=x11 --with-imagelib=gtk2 --with-migemo=no --enable-m17n \
# 	--enable-unicode --enable-mouse --enable-nls --disable-nntp --enable-digest-auth \
# 	--with-ssl --disable-xface --with-charset=UTF-8 --enable-keymap=w3m
#     [ $? -eq 0 ] || exit 1
#     $MAKE && sudo $MAKE install
# fi

# Install emacs-w3m
# Howto: cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot co emacs-w3m
mkdir -p $TARGET_SITE_LISP_PATH/share/emacs/site-lisp
# if [ ! -d $TARGET_SITE_LISP_PATH/share/emacs/site-lisp/w3m ]; then
# 	echo "Install emacs-w3m ......"
# 	sudo rm -rf /tmp/emacs-w3m
# 	cp -rvd $PKG_PATH/emacs-w3m /tmp
# 	cd /tmp/emacs-w3m
# 	autoconf && ./configure --prefix=$TARGET_SITE_LISP_PATH
# 	[ $? -eq 0 ] || exit 1
# 	$MAKE && $MAKE install
# fi

################################################################################
# Install emms
# Howto: git clone git://git.sv.gnu.org/emms.git
cp -dr $PKG_PATH/emms $TARGET_SITE_LISP_PATH/emms

################################################################################
# Install ecb
ECB_VERSION=snap
if [ ! -d $TARGET_SITE_LISP_PATH/ecb ]; then
	echo "Install ecb ......"
	tar xfz $PKG_PATH/ecb-$ECB_VERSION.tar.gz -C /tmp
	mv /tmp/ecb-$ECB_VERSION $TARGET_SITE_LISP_PATH/ecb
	cd $TARGET_SITE_LISP_PATH/ecb
fi

################################################################################
# Install edict
if [ ! -d $TARGET_APP_PATH/stardict-oxford-gb-2.4.2 ]; then
	tar xfj $PKG_PATH/stardict-oxford-gb-2.4.2.tar.bz2 -C $TARGET_APP_PATH
fi
cp -f $PKG_PATH/edict.py $TARGET_APP_PATH

################################################################################
# Install for blog
cp -f $PKG_PATH/xml-rpc.el $TARGET_SITE_LISP_PATH

if [ -d $TARGET_SITE_LISP_PATH/org2blog ]; then
	rm -rf $TARGET_SITE_LISP_PATH/org2blog
fi
cp -r $PKG_PATH/org2blog $TARGET_SITE_LISP_PATH

################################################################################
# doxymacs for code comment
mkdir -p $TARGET_SITE_LISP_PATH/share/emacs/site-lisp
if [ ! -f $TARGET_SITE_LISP_PATH/share/emacs/site-lisp/doxymacs.el ]; then
	echo "Install doxymacs ......"
	sudo rm -rf /tmp/doxymacs-1.8.0
	tar xfz $PKG_PATH/doxymacs-1.8.0.tar.gz -C /tmp
	cd /tmp/doxymacs-1.8.0
	./configure --prefix=$TARGET_SITE_LISP_PATH
	[ $? -eq 0 ] || exit 1
	$MAKE && $MAKE install
fi

################################################################################
# Install org-mode 
mkdir -p $TARGET_SITE_LISP_PATH/share/emacs/site-lisp
if [ ! -f $TARGET_SITE_LISP_PATH/share/emacs/site-lisp/org.el ]; then
	echo "Install org-mode ......"
	sudo rm -rf /tmp/org-7.7
	tar xfz $PKG_PATH/org-7.7.tar.gz -C /tmp
	cd /tmp/org-7.7
	$MAKE prefix=$TARGET_SITE_LISP_PATH && $MAKE prefix=$TARGET_SITE_LISP_PATH install
fi

# Config for erc
if [ ! -f $HOME/.ercpass  ]; then
	touch $HOME/.ercpass
fi

################################################################################
# Install git-emacs
GIT_EMACS_VERSION=20120129
if [ ! -d $TARGET_SITE_LISP_PATH/git-emacs ]; then
	echo "Install git-emacs ......"
	tar xf $PKG_PATH/git-emacs-$GIT_EMACS_VERSION.tar.gz -C /tmp
	mv /tmp/git-emacs-$GIT_EMACS_VERSION $TARGET_SITE_LISP_PATH/git-emacs
	cd $TARGET_SITE_LISP_PATH/git-emacs
	$MAKE
fi

################################################################################
# Install CEDET
CEDET_VERSION=20120311
if [ ! -d $TARGET_SITE_LISP_PATH/cedet ]; then
	echo "Install CEDET ......"
	tar xf $PKG_PATH/cedet-$CEDET_VERSION.tar.gz -C /tmp
	mv /tmp/cedet-$CEDET_VERSION $TARGET_SITE_LISP_PATH/cedet
	cd $TARGET_SITE_LISP_PATH/cedet
	$MAKE EMACS=emacs
fi

################################################################################
# Install anything-config
ANYTHING_CONFIG_VERSION=20120331
if [ ! -d $TARGET_SITE_LISP_PATH/anything-config ]; then
	echo "Install anything-config ......"
	tar xf $PKG_PATH/anything-config-$ANYTHING_CONFIG_VERSION.tar.gz -C /tmp
	mv /tmp/anything-$ANYTHING_CONFIG_VERSION $TARGET_SITE_LISP_PATH/anything-config
	cd $TARGET_SITE_LISP_PATH/anything-config
	$MAKE
fi
