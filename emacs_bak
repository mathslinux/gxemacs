;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Geniux's emacs config file 
;; Time-stamp: <2011-08-11-09:18:05 by mathslinux>
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Init - 主要是一些自定义的变量的初始化, 配置文件的路径的設定.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 設置默認配置文件的頂層目錄 
(defconst emacs-config-path "~/.emacs.d/" "emacs配置文件的路径")

;; 添加兩個存放配置文件的目錄, lisp 存放網路上下載的 lisp 程序,
;; my-lisp 存放 geniux 自己寫的 lisp 程序
;; my-common 存放 网上下载的单个文件
(defconst site-lisp-path (concat emacs-config-path "site-lisp/") "emacs配置文件的路径")
(defconst apps-path (concat emacs-config-path "my-app/") "非lisp程序路径")
(defconst my-lisp-path (concat emacs-config-path "my-lisp/") "emacs配置文件的路径")
(defconst my-lisp-common (concat my-lisp-path "my-common/") "公共文件")
(add-to-list 'load-path lisp-path)
(add-to-list 'load-path my-lisp-path)
(add-to-list 'load-path my-lisp-common)


;; Load all files in my-lisp-path.
(setq load-files (directory-files my-lisp-path t "\\.el$"))
(if load-files
    (mapc 'load load-files)
  (print "No file to be load"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; UI - 主題, 字體等的設置
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst ui-config-path (concat my-lisp-path "my-ui/") "整個 UI 設置的路徑")
(add-to-list 'load-path ui-config-path)
(load "my-ui")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 编辑设置
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "my-highlight-symbol")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 快捷鍵設置
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "my-keymap")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dev - 編程開發的設置
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; C - mode
;; need sourcepair.el
;; Todo: yaourt -S cscope(ubuntu: apt-get install cscope)
;; need xscope
(load "my-c")

;; Auto-complete setting
;; Todo: 
;; 1: 解壓 auto-complete-*.tar.bz2 到任何目錄
;; 2. cd auto-complete-* && make install DIR=$HOME/.emacs.d/lisp/auto-complete
;; 3. 加入類似 
(load "my-auto-complete")


;; python mode
;; !!有bug, yaourt -S ropemacs(apt-get install python-ropemacs)
;; 重源码安装
;; hg clone http://bitbucket.org/agr/rope
;; hg clone http://bitbucket.org/agr/ropemacs
;; hg clone http://bitbucket.org/agr/ropemode
;; sudo easy_install rope
;; ln -s ../ropemode/ropemode ropemacs/
;; sudo easy_install ropemacs
;; sudo apt-get install pymacs(yaourt -S pymacs)
;; 不要使用python3
(load "my-python")

;; cedet setting
(load "my-cedet")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; zhuangbility mode
(load "my-pulse")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Other -  其它設置
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; org-mode
;; 自动断行
(add-hook 'org-mode-hook 
		  (lambda () (setq truncate-lines nil)))
(setq org-todo-keywords
      '((sequence "TODO(t)" "DOING(d)" "|" "DONE" "CANCEL(c)")
        (sequence "REPORT(r)" "DEBUG(b)" "|" "FIXED(f!)")
        (sequence "TODO" "|" "DONE")))
(setq org-log-done 'note)

;; skeleton
(define-skeleton 1exp 
  "Input #+BEGIN_EXAMPLE #+END_EXAMPLE in org-mode"
""
"#+BEGIN_EXAMPLE\n"
 _ "\n" 
"#+END_EXAMPLE"
)
;; bug
;; (define-abbrev org-mode-abbrev-table "iexp" "" '1exp)

;; 代码折叠
(add-hook 'c-mode-hook 'hs-minor-mode)
(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'python-mode-hook 'hs-minor-mode)

;; bookmark
(load "bm-1.53")
(global-set-key (kbd "<f2>") 'bm-toggle)
(global-set-key (kbd "<C-f2>")   'bm-next)
(global-set-key (kbd "<S-f2>") 'bm-previous)

;; jabber 0.8
;; apt-get install emacs-jabber
;; ./configure --prefix=$HOME/.emacs.d/lisp/jabber; make && make install
(add-to-list 'load-path (concat lisp-path "jabber/share/emacs/site-lisp/"))
(load "jabber-autoloads")
(setq jabber-account-list
      '(("riegamaths@gmail.com"
         (:network-server . "talk.google.com")
         (:connection-type . ssl))))

;; custom  設置
(load "my-custom")

;; yasnippet
;; 解压 yasnippet 到 ~/.emacs.d/lisp
(load "my-yasnippet")

;; 保留菜单的配置
(setq custom-file "~/.emacs.d/my-lisp/my-custom.el")

;; 询问时不用 yes or no,用 y/n
(fset 'yes-or-no-p 'y-or-n-p)

;; 支持和外部程序的粘帖
(setq x-select-enable-clipboard t) 

;; 显示匹配的括号 
(show-paren-mode t)

;; Time-stamp setting
(setq time-stamp-active t)
(setq time-stamp-format "%04y-%02m-%02d-%02H:%02M:%02S %:a by geniux")
(add-hook 'before-save-hook 'time-stamp)

;; 自动加载被外部程序修改的文件
(global-auto-revert-mode t)

;; 不产生备份文件
(setq make-backup-files nil) 

;; 设置 TAB 键盘宽度为4
(setq default-tab-width 4)

;; 回车自动缩进
(global-set-key "\r" 'newline-and-indent)

;; 输入左括号自动补齐右括号和中间的内容, 改進???????
(setq skeleton-pair t)
(global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "`") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "'") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "<") 'skeleton-pair-insert-maybe)
(global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
;; (add-hook 'c-mode-hook 'my-auto-pair)
;; (add-hook 'c++-mode-hook 'my-auto-pair)
;; (add-hook 'emacs-lisp-mode-hook 'my-auto-pair)
;; (add-hook 'java-mode-hook 'my-auto-pair)
;; (add-hook 'python-mode-hook 'my-auto-pair)
;; (defun my-auto-pair ()
;;   (interactive)
;;   (setq skeleton-pair t)
;;   (local-set-key (kbd "(") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "{") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "`") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "'") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "<") 'skeleton-pair-insert-maybe)
;;   (local-set-key (kbd "[") 'skeleton-pair-insert-maybe))
;; (my-auto-pair)

;; smart-operator
(require 'smart-operator)
(smart-operator-mode t)

;; browse
(setq browse-url-browser-function 'browse-url-firefox)

;; cedet, 使用官方版本(note, 安装了cedet以后, 内置的cedet失效)
;; Todo: pacman -S cedet
;; (load-file "/usr/share/emacs/site-lisp/cedet/common/cedet.el")

;; (setq user-mail-address "riegamaths@gmail.com")
;; (setq user-full-name "mathslinux")
;; (load-library "smtpmail")
;; (load-library "nnimap")
;; (load-library "starttls")
;; (setq gnus-select-method '(nnimap "imap.gmail.com"
;; 								   (nnimap-address "imap.gmail.com")
;; 								   (nnimap-server-port 993)
;; 								   (nnimap-authinfo-file "~/.imap-authinfo")
;; 								   (nnimap-stream ssl)))

;; (setq smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
;; 	  smtpmail-smtp-server "smtp.gmail.com"
;; 	  smtpmail-default-smtp-server "smtp.gmail.com"
;; 	  send-mail-function 'smtpmail-send-it
;; 	  message-send-mail-function 'smtpmail-send-it
;; 	  smtpmail-smtp-service 587
;; 	  smtpmail-auth-credentials '(("smtp.gmail.com"
;; 									587
;; 									"riegamaths@gmail.com"
;; 									nil)))


;; emms
;; Howto: git clone git://git.sv.gnu.org/emms.git
(add-to-list 'load-path (concat lisps-path "/emms/lisp"))
(require 'emms-setup)
(emms-standard)
;; no cli volume setup tools in windows
                                        ;(require 'emms-volume)
(require 'emms-score)
(emms-score 1)
;; autodetect musci files id3 tags encodeing
(require 'emms-i18n)
;; auto-save and import last playlist
(require 'emms-history)

(setq emms-player-list '(emms-player-mplayer)
	  emms-player-mplayer-command-name "mplayer"
	  emms-player-mplayer-parameters '("-slave"))

;; my customizable playlist format
(defun my-emms-info-track-description (track)
  "Return a description of the current track."
  (let ((artist (emms-track-get track 'info-artist))
        (title (emms-track-get track 'info-title))
        (album (emms-track-get track 'info-album))
        (ptime (emms-track-get track 'info-playing-time)))
    (if title 
        (format 
         "%-35s %-40s %-35s %5s:%-5s"
         (if artist artist "")
         (if title title "")
         (if album album "")
         (/ ptime 60)
         (% ptime 60)))))
(setq emms-track-description-function
      'my-emms-info-track-description)

;; format current track,only display title in mode line
(defun my-emms-mode-line-playlist-current ()
  "Return a description of the current track."
  (let* ((track (emms-playlist-current-selected-track))
         (type (emms-track-type track))
         (title (emms-track-get track 'info-title)))
    (format "[ %s ]"
            (cond ((and title)
                   title)))))
(setq emms-mode-line-mode-line-function
      'my-emms-mode-line-playlist-current)

(setq emms-source-file-default-directory "~/Music/")
;; global key-map
;; all global keys prefix is C-c e
;; compatible with emms-playlist mode keybindings
;; you can view emms-playlist-mode.el to get details about 
;; emms-playlist mode keys map
(global-set-key (kbd "C-c e s") 'emms-stop)
(global-set-key (kbd "C-c e P") 'emms-pause)
(global-set-key (kbd "C-c e n") 'emms-next)
(global-set-key (kbd "C-c e p") 'emms-previous)
(global-set-key (kbd "C-c e f") 'emms-show)
(global-set-key (kbd "C-c e >") 'emms-seek-forward)
(global-set-key (kbd "C-c e <") 'emms-seek-backward)
;; these keys maps were derivations of above keybindings
(global-set-key (kbd "C-c e S") 'emms-start)
(global-set-key (kbd "C-c e g") 'emms-playlist-mode-go)
(global-set-key (kbd "C-c e t") 'emms-play-directory-tree)
(global-set-key (kbd "C-c e h") 'emms-shuffle)
(global-set-key (kbd "C-c e e") 'emms-play-file)
(global-set-key (kbd "C-c e l") 'emms-play-playlist)
(global-set-key (kbd "C-c e r") 'emms-toggle-repeat-track)
(global-set-key (kbd "C-c e R") 'emms-toggle-repeat-playlist)
(global-set-key (kbd "C-c e u") 'emms-score-up-playing)
(global-set-key (kbd "C-c e d") 'emms-score-down-playing)
(global-set-key (kbd "C-c e o") 'emms-score-show-playing)


;; ecb
(add-to-list 'load-path "/usr/share/emacs/site-lisp/ecb")
(require 'ecb)
(defun my-ecb ()
  "启动ecb"
  (interactive)
  (setq ecb-tip-of-the-day nil)
  (ecb-activate))
  (ecb-layout-switch "left2")
(my-ecb)

;; edict
(require 'edict)
(setq edict-apps-dir (concat my-apps-path "edict/"))
(setq edict-engine "google") 
(setq edict-from-lang "en")
(setq edict-to-lang "zh")
(global-set-key (kbd "<f10>") 'edict)

;; twitter
(require 'epa-file)
(epa-file-enable)
(add-to-list 'load-path (concat lisps-path "/twittering-mode-2.0.0"))
(require 'twittering-mode)
;; (setq twittering-use-master-password t)
(setq twittering-allow-insecure-server-cert t)
(setq twittering-oauth-use-ssl nil)
(setq twittering-use-ssl nil)
(twittering-enable-unread-status-notifier)
(setq-default twittering-icon-mode t)
; This tells twittering-mode which time line buffers 
; to open when starting
(setq twittering-initial-timeline-spec-string
      '(":home"
		":friends"
        ":replies"
        ":direct_messages"
        "citizen428/tupaleros"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Config for experiment
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(load "my-experiment")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Desktop and session setting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst desktop-config-path (concat my-lisps-path "my-desktop/") "整個 desktop 設置的路徑")
(add-to-list 'load-path desktop-config-path)
(load "my-desktop")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
